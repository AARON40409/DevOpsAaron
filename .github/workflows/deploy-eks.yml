name: EKS Deployment Workflow

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
        description: "Application name"
      image_tag:
        required: true
        type: string
        description: "Docker image tag"
      eks_cluster_name:
        required: true
        type: string
        description: "EKS cluster name"
      aws_region:
        required: true
        type: string
        description: "AWS region"
        default: "us-east-1"
      k8s_manifest_path:
        required: false
        type: string
        description: "Path to Kubernetes manifests"
        default: "k8s/"
      deploy_stage:
        required: true
        type: string
        description: "Deployment stage"
      timeout_seconds:
        required: false
        type: number
        description: "Rollout timeout in seconds"
        default: 300

    secrets:
      dockerhub_username:
        required: true
        description: "DockerHub username"
      dockerhub_token:
        required: true
        description: "DockerHub token/password"
      aws_access_key_id:
        required: true
        description: "AWS access key ID"
      aws_secret_access_key:
        required: true
        description: "AWS secret access key"

jobs:
  build:
    name: Build and push to DockerHub
    runs-on: ubuntu-22.04
    outputs:
      image_tag: ${{ inputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.dockerhub_token }}" | docker login -u ${{ secrets.dockerhub_username }} --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.dockerhub_username }}/${{ inputs.app_name }}:${{ inputs.image_tag }}
            ${{ secrets.dockerhub_username }}/${{ inputs.app_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy to k8s cluster
    environment:
      name: ${{ inputs.deploy_stage }}
      url: ${{ steps.get-service-url.outputs.SERVICE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}
          
      - name: Connect to EKS cluster
        run: |
          aws sts get-caller-identity
          aws eks update-kubeconfig \
            --region ${{ inputs.aws_region }} \
            --name ${{ inputs.eks_cluster_name }}
                  
      - name: Deploy to Kubernetes 
        run: |
          # Mise à jour de l'image dans le deployment
          sed -i "s|image:.*|image: ${{ secrets.dockerhub_username }}/${{ inputs.app_name }}:${{ inputs.image_tag }}|" ${{ inputs.k8s_manifest_path }}secret-game-deployment.yml
          
          # Application des manifests
          kubectl apply -f ${{ inputs.k8s_manifest_path }} --validate=false
          
   #        # Vérification du déploiement
   #        kubectl rollout status deployment/secret-game-deployment --timeout=${{ inputs.timeout_seconds }}s

      - name: Wait for LoadBalancer provisioning
        id: get-service-url
        run: |
          echo "⏳ Attente de la provision du LoadBalancer AWS..."
          
          # Attendre maximum 5 minutes que le LoadBalancer soit disponible
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc secret-game-svc -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            
            if [ -n "$EXTERNAL_IP" ]; then
              echo "✅ LoadBalancer provisionné : $EXTERNAL_IP"
              echo "SERVICE_URL=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Timeout - LoadBalancer non provisionné après 5 minutes"
              echo "SERVICE_URL=LoadBalancer-en-attente" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "⏳ Attente ($i/30)..."
            sleep 10
          done